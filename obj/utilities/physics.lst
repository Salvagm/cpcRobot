                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.4 #9329 (Linux)
                              4 ; This file was generated Mon Oct 12 18:21:21 2015
                              5 ;--------------------------------------------------------
                              6 	.module physics
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _resetIndex
                             13 	.globl _insertInCollisionArray
                             14 	.globl _getCollisionedCollider
                             15 	.globl _topRightIndex
                             16 	.globl _botRighttIndex
                             17 	.globl _topLeftIndex
                             18 	.globl _botLeftIndex
                             19 	.globl _TRstaticColliders
                             20 	.globl _TLstaticColliders
                             21 	.globl _BRstaticColliders
                             22 	.globl _BLstaticColliders
                             23 	.globl _addStaticCollider
                             24 	.globl _checkWorldCollision
                             25 ;--------------------------------------------------------
                             26 ; special function registers
                             27 ;--------------------------------------------------------
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DATA
                             32 ;--------------------------------------------------------
                             33 ; ram data
                             34 ;--------------------------------------------------------
                             35 	.area _INITIALIZED
   0000                      36 _BLstaticColliders::
   0000                      37 	.ds 10
   000A                      38 _BRstaticColliders::
   000A                      39 	.ds 10
   0014                      40 _TLstaticColliders::
   0014                      41 	.ds 10
   001E                      42 _TRstaticColliders::
   001E                      43 	.ds 10
   0028                      44 _botLeftIndex::
   0028                      45 	.ds 1
   0029                      46 _topLeftIndex::
   0029                      47 	.ds 1
   002A                      48 _botRighttIndex::
   002A                      49 	.ds 1
   002B                      50 _topRightIndex::
   002B                      51 	.ds 1
                             52 ;--------------------------------------------------------
                             53 ; absolute external ram data
                             54 ;--------------------------------------------------------
                             55 	.area _DABS (ABS)
                             56 ;--------------------------------------------------------
                             57 ; global & static initialisations
                             58 ;--------------------------------------------------------
                             59 	.area _HOME
                             60 	.area _GSINIT
                             61 	.area _GSFINAL
                             62 	.area _GSINIT
                             63 ;--------------------------------------------------------
                             64 ; Home
                             65 ;--------------------------------------------------------
                             66 	.area _HOME
                             67 	.area _HOME
                             68 ;--------------------------------------------------------
                             69 ; code
                             70 ;--------------------------------------------------------
                             71 	.area _CODE
                             72 ;src/utilities/physics.c:28: TCollider* getCollisionedCollider(TCollider* vCollider[] , TCollider* entCollider, u8 vColliderSize)
                             73 ;	---------------------------------
                             74 ; Function getCollisionedCollider
                             75 ; ---------------------------------
   0000                      76 _getCollisionedCollider::
   0000 DD E5         [15]   77 	push	ix
   0002 DD 21 00 00   [14]   78 	ld	ix,#0
   0006 DD 39         [15]   79 	add	ix,sp
   0008 21 F1 FF      [10]   80 	ld	hl,#-15
   000B 39            [11]   81 	add	hl,sp
   000C F9            [ 6]   82 	ld	sp,hl
                             83 ;src/utilities/physics.c:34: u8 index = vColliderSize;
   000D DD 7E 08      [19]   84 	ld	a,8 (ix)
   0010 DD 77 FD      [19]   85 	ld	-3 (ix),a
                             86 ;src/utilities/physics.c:36: i8 entTopY = entCollider->y;
   0013 DD 5E 06      [19]   87 	ld	e,6 (ix)
   0016 DD 56 07      [19]   88 	ld	d,7 (ix)
   0019 6B            [ 4]   89 	ld	l, e
   001A 62            [ 4]   90 	ld	h, d
   001B 23            [ 6]   91 	inc	hl
   001C 4E            [ 7]   92 	ld	c,(hl)
   001D DD 71 F7      [19]   93 	ld	-9 (ix),c
                             94 ;src/utilities/physics.c:37: i8 entBotY = entCollider->y + entCollider->h;
   0020 D5            [11]   95 	push	de
   0021 FD E1         [14]   96 	pop	iy
   0023 FD 6E 03      [19]   97 	ld	l,3 (iy)
   0026 09            [11]   98 	add	hl, bc
   0027 DD 75 F6      [19]   99 	ld	-10 (ix),l
                            100 ;src/utilities/physics.c:38: i8 entLefX = entCollider->x;
   002A 1A            [ 7]  101 	ld	a,(de)
   002B 4F            [ 4]  102 	ld	c,a
   002C DD 71 F5      [19]  103 	ld	-11 (ix),c
                            104 ;src/utilities/physics.c:39: i8 entRightX = entCollider->x + entCollider->w;
   002F EB            [ 4]  105 	ex	de,hl
   0030 23            [ 6]  106 	inc	hl
   0031 23            [ 6]  107 	inc	hl
   0032 6E            [ 7]  108 	ld	l,(hl)
   0033 09            [11]  109 	add	hl, bc
   0034 4D            [ 4]  110 	ld	c,l
                            111 ;src/utilities/physics.c:40: TCollider* collisionedColliders[2] = {0,0};
   0035 21 00 00      [10]  112 	ld	hl,#0x0000
   0038 39            [11]  113 	add	hl,sp
   0039 5D            [ 4]  114 	ld	e,l
   003A 54            [ 4]  115 	ld	d,h
   003B AF            [ 4]  116 	xor	a, a
   003C 77            [ 7]  117 	ld	(hl), a
   003D 23            [ 6]  118 	inc	hl
   003E 77            [ 7]  119 	ld	(hl), a
   003F 6B            [ 4]  120 	ld	l, e
   0040 62            [ 4]  121 	ld	h, d
   0041 23            [ 6]  122 	inc	hl
   0042 23            [ 6]  123 	inc	hl
   0043 AF            [ 4]  124 	xor	a, a
   0044 77            [ 7]  125 	ld	(hl), a
   0045 23            [ 6]  126 	inc	hl
   0046 77            [ 7]  127 	ld	(hl), a
                            128 ;src/utilities/physics.c:42: while(index)
   0047 DD 36 F8 00   [19]  129 	ld	-8 (ix),#0x00
   004B                     130 00106$:
   004B DD 7E FD      [19]  131 	ld	a,-3 (ix)
   004E B7            [ 4]  132 	or	a, a
   004F CArE5r00      [10]  133 	jp	Z,00108$
                            134 ;src/utilities/physics.c:44: blockLeftX = entRightX - vCollider[index]->x ; // X_1 + W_1 - X_2 > 0
   0052 DD 6E FD      [19]  135 	ld	l,-3 (ix)
   0055 26 00         [ 7]  136 	ld	h,#0x00
   0057 29            [11]  137 	add	hl, hl
   0058 DD 75 FE      [19]  138 	ld	-2 (ix),l
   005B DD 74 FF      [19]  139 	ld	-1 (ix),h
   005E DD 7E FE      [19]  140 	ld	a,-2 (ix)
   0061 DD 86 04      [19]  141 	add	a, 4 (ix)
   0064 6F            [ 4]  142 	ld	l,a
   0065 DD 7E FF      [19]  143 	ld	a,-1 (ix)
   0068 DD 8E 05      [19]  144 	adc	a, 5 (ix)
   006B 67            [ 4]  145 	ld	h,a
   006C 7E            [ 7]  146 	ld	a,(hl)
   006D DD 77 FE      [19]  147 	ld	-2 (ix),a
   0070 23            [ 6]  148 	inc	hl
   0071 7E            [ 7]  149 	ld	a,(hl)
   0072 DD 77 FF      [19]  150 	ld	-1 (ix),a
   0075 DD 6E FE      [19]  151 	ld	l,-2 (ix)
   0078 DD 66 FF      [19]  152 	ld	h,-1 (ix)
   007B 46            [ 7]  153 	ld	b,(hl)
   007C 60            [ 4]  154 	ld	h,b
   007D 79            [ 4]  155 	ld	a,c
   007E 94            [ 4]  156 	sub	a, h
   007F DD 77 FA      [19]  157 	ld	-6 (ix),a
                            158 ;src/utilities/physics.c:45: blockRightX = vCollider[index]->x - vCollider[index]->w - entLefX; // X_2 + W_2 - X_1 > 0
   0082 DD 6E FE      [19]  159 	ld	l,-2 (ix)
   0085 DD 66 FF      [19]  160 	ld	h,-1 (ix)
   0088 23            [ 6]  161 	inc	hl
   0089 23            [ 6]  162 	inc	hl
   008A 66            [ 7]  163 	ld	h,(hl)
   008B 78            [ 4]  164 	ld	a,b
   008C 94            [ 4]  165 	sub	a, h
   008D DD 96 F5      [19]  166 	sub	a, -11 (ix)
   0090 DD 77 F9      [19]  167 	ld	-7 (ix),a
                            168 ;src/utilities/physics.c:46: blockBotY = vCollider[index]->y + vCollider[index]->h - entTopY; // Y_2 + H_2 - Y_1 > 0
   0093 DD 6E FE      [19]  169 	ld	l,-2 (ix)
   0096 DD 66 FF      [19]  170 	ld	h,-1 (ix)
   0099 23            [ 6]  171 	inc	hl
   009A 46            [ 7]  172 	ld	b,(hl)
   009B DD 6E FE      [19]  173 	ld	l,-2 (ix)
   009E DD 66 FF      [19]  174 	ld	h,-1 (ix)
   00A1 23            [ 6]  175 	inc	hl
   00A2 23            [ 6]  176 	inc	hl
   00A3 23            [ 6]  177 	inc	hl
   00A4 66            [ 7]  178 	ld	h,(hl)
   00A5 78            [ 4]  179 	ld	a,b
   00A6 84            [ 4]  180 	add	a, h
   00A7 DD 96 F7      [19]  181 	sub	a, -9 (ix)
   00AA DD 77 FB      [19]  182 	ld	-5 (ix),a
                            183 ;src/utilities/physics.c:47: blockTopY = entBotY - vCollider[index]->y ; // Y_1 + H_1 - Y_2 > 0
   00AD DD 7E F6      [19]  184 	ld	a,-10 (ix)
   00B0 90            [ 4]  185 	sub	a, b
   00B1 DD 77 FC      [19]  186 	ld	-4 (ix),a
                            187 ;src/utilities/physics.c:49: if(blockLeftX && blockRightX && blockBotY && blockTopY)
   00B4 DD 7E FA      [19]  188 	ld	a,-6 (ix)
   00B7 B7            [ 4]  189 	or	a, a
   00B8 28 25         [12]  190 	jr	Z,00102$
   00BA DD 7E F9      [19]  191 	ld	a,-7 (ix)
   00BD B7            [ 4]  192 	or	a, a
   00BE 28 1F         [12]  193 	jr	Z,00102$
   00C0 DD 7E FB      [19]  194 	ld	a,-5 (ix)
   00C3 B7            [ 4]  195 	or	a, a
   00C4 28 19         [12]  196 	jr	Z,00102$
   00C6 DD 7E FC      [19]  197 	ld	a,-4 (ix)
   00C9 B7            [ 4]  198 	or	a, a
   00CA 28 13         [12]  199 	jr	Z,00102$
                            200 ;src/utilities/physics.c:51: collisionedColliders[collisions] = vCollider[index];
   00CC DD 6E F8      [19]  201 	ld	l,-8 (ix)
   00CF 26 00         [ 7]  202 	ld	h,#0x00
   00D1 29            [11]  203 	add	hl, hl
   00D2 19            [11]  204 	add	hl,de
   00D3 DD 7E FE      [19]  205 	ld	a,-2 (ix)
   00D6 77            [ 7]  206 	ld	(hl),a
   00D7 23            [ 6]  207 	inc	hl
   00D8 DD 7E FF      [19]  208 	ld	a,-1 (ix)
   00DB 77            [ 7]  209 	ld	(hl),a
                            210 ;src/utilities/physics.c:52: ++collisions;
   00DC DD 34 F8      [23]  211 	inc	-8 (ix)
   00DF                     212 00102$:
                            213 ;src/utilities/physics.c:55: --index;
   00DF DD 35 FD      [23]  214 	dec	-3 (ix)
   00E2 C3r4Br00      [10]  215 	jp	00106$
   00E5                     216 00108$:
                            217 ;src/utilities/physics.c:57: return collisionedColliders;
   00E5 EB            [ 4]  218 	ex	de,hl
   00E6 DD F9         [10]  219 	ld	sp, ix
   00E8 DD E1         [14]  220 	pop	ix
   00EA C9            [10]  221 	ret
                            222 ;src/utilities/physics.c:61: void insertInCollisionArray(TCollider *col, u8 pointX, u8 pointY)
                            223 ;	---------------------------------
                            224 ; Function insertInCollisionArray
                            225 ; ---------------------------------
   00EB                     226 _insertInCollisionArray::
   00EB DD E5         [15]  227 	push	ix
   00ED DD 21 00 00   [14]  228 	ld	ix,#0
   00F1 DD 39         [15]  229 	add	ix,sp
                            230 ;src/utilities/physics.c:65: if(pointX < MID_VSCREEN)
   00F3 DD 7E 06      [19]  231 	ld	a,6 (ix)
   00F6 D6 28         [ 7]  232 	sub	a, #0x28
   00F8 3E 00         [ 7]  233 	ld	a,#0x00
   00FA 17            [ 4]  234 	rla
   00FB 4F            [ 4]  235 	ld	c,a
                            236 ;src/utilities/physics.c:63: if(pointY < MID_HSCREEN)
   00FC DD 7E 07      [19]  237 	ld	a,7 (ix)
   00FF D6 64         [ 7]  238 	sub	a, #0x64
   0101 30 3E         [12]  239 	jr	NC,00108$
                            240 ;src/utilities/physics.c:65: if(pointX < MID_VSCREEN)
   0103 79            [ 4]  241 	ld	a,c
   0104 B7            [ 4]  242 	or	a, a
   0105 28 1D         [12]  243 	jr	Z,00102$
                            244 ;src/utilities/physics.c:67: BLstaticColliders[botLeftIndex] = col;	
   0107 FD 21r28r00   [14]  245 	ld	iy,#_botLeftIndex
   010B FD 6E 00      [19]  246 	ld	l,0 (iy)
   010E 26 00         [ 7]  247 	ld	h,#0x00
   0110 29            [11]  248 	add	hl, hl
   0111 11r00r00      [10]  249 	ld	de,#_BLstaticColliders
   0114 19            [11]  250 	add	hl,de
   0115 DD 7E 04      [19]  251 	ld	a,4 (ix)
   0118 77            [ 7]  252 	ld	(hl),a
   0119 23            [ 6]  253 	inc	hl
   011A DD 7E 05      [19]  254 	ld	a,5 (ix)
   011D 77            [ 7]  255 	ld	(hl),a
                            256 ;src/utilities/physics.c:68: ++botLeftIndex;
   011E 21r28r00      [10]  257 	ld	hl, #_botLeftIndex+0
   0121 34            [11]  258 	inc	(hl)
   0122 18 59         [12]  259 	jr	00110$
   0124                     260 00102$:
                            261 ;src/utilities/physics.c:72: BRstaticColliders[botRighttIndex] = col;
   0124 FD 21r2Ar00   [14]  262 	ld	iy,#_botRighttIndex
   0128 FD 6E 00      [19]  263 	ld	l,0 (iy)
   012B 26 00         [ 7]  264 	ld	h,#0x00
   012D 29            [11]  265 	add	hl, hl
   012E 11r0Ar00      [10]  266 	ld	de,#_BRstaticColliders
   0131 19            [11]  267 	add	hl,de
   0132 DD 7E 04      [19]  268 	ld	a,4 (ix)
   0135 77            [ 7]  269 	ld	(hl),a
   0136 23            [ 6]  270 	inc	hl
   0137 DD 7E 05      [19]  271 	ld	a,5 (ix)
   013A 77            [ 7]  272 	ld	(hl),a
                            273 ;src/utilities/physics.c:73: ++botRighttIndex;
   013B 21r2Ar00      [10]  274 	ld	hl, #_botRighttIndex+0
   013E 34            [11]  275 	inc	(hl)
   013F 18 3C         [12]  276 	jr	00110$
   0141                     277 00108$:
                            278 ;src/utilities/physics.c:78: if(pointX < MID_VSCREEN)
   0141 79            [ 4]  279 	ld	a,c
   0142 B7            [ 4]  280 	or	a, a
   0143 28 1D         [12]  281 	jr	Z,00105$
                            282 ;src/utilities/physics.c:80: TLstaticColliders[topLeftIndex] = col;	
   0145 FD 21r29r00   [14]  283 	ld	iy,#_topLeftIndex
   0149 FD 6E 00      [19]  284 	ld	l,0 (iy)
   014C 26 00         [ 7]  285 	ld	h,#0x00
   014E 29            [11]  286 	add	hl, hl
   014F 11r14r00      [10]  287 	ld	de,#_TLstaticColliders
   0152 19            [11]  288 	add	hl,de
   0153 DD 7E 04      [19]  289 	ld	a,4 (ix)
   0156 77            [ 7]  290 	ld	(hl),a
   0157 23            [ 6]  291 	inc	hl
   0158 DD 7E 05      [19]  292 	ld	a,5 (ix)
   015B 77            [ 7]  293 	ld	(hl),a
                            294 ;src/utilities/physics.c:81: ++topLeftIndex;
   015C 21r29r00      [10]  295 	ld	hl, #_topLeftIndex+0
   015F 34            [11]  296 	inc	(hl)
   0160 18 1B         [12]  297 	jr	00110$
   0162                     298 00105$:
                            299 ;src/utilities/physics.c:85: TRstaticColliders[topRightIndex] = col;	
   0162 FD 21r2Br00   [14]  300 	ld	iy,#_topRightIndex
   0166 FD 6E 00      [19]  301 	ld	l,0 (iy)
   0169 26 00         [ 7]  302 	ld	h,#0x00
   016B 29            [11]  303 	add	hl, hl
   016C 11r1Er00      [10]  304 	ld	de,#_TRstaticColliders
   016F 19            [11]  305 	add	hl,de
   0170 DD 7E 04      [19]  306 	ld	a,4 (ix)
   0173 77            [ 7]  307 	ld	(hl),a
   0174 23            [ 6]  308 	inc	hl
   0175 DD 7E 05      [19]  309 	ld	a,5 (ix)
   0178 77            [ 7]  310 	ld	(hl),a
                            311 ;src/utilities/physics.c:86: ++topRightIndex;
   0179 21r2Br00      [10]  312 	ld	hl, #_topRightIndex+0
   017C 34            [11]  313 	inc	(hl)
   017D                     314 00110$:
   017D DD E1         [14]  315 	pop	ix
   017F C9            [10]  316 	ret
                            317 ;src/utilities/physics.c:95: void addStaticCollider(TCollider* col)
                            318 ;	---------------------------------
                            319 ; Function addStaticCollider
                            320 ; ---------------------------------
   0180                     321 _addStaticCollider::
   0180 DD E5         [15]  322 	push	ix
   0182 DD 21 00 00   [14]  323 	ld	ix,#0
   0186 DD 39         [15]  324 	add	ix,sp
   0188 21 FA FF      [10]  325 	ld	hl,#-6
   018B 39            [11]  326 	add	hl,sp
   018C F9            [ 6]  327 	ld	sp,hl
                            328 ;src/utilities/physics.c:97: insertInCollisionArray(col, col->x, col->y);
   018D DD 5E 04      [19]  329 	ld	e,4 (ix)
   0190 DD 56 05      [19]  330 	ld	d,5 (ix)
   0193 21 01 00      [10]  331 	ld	hl,#0x0001
   0196 19            [11]  332 	add	hl,de
   0197 DD 75 FC      [19]  333 	ld	-4 (ix),l
   019A DD 74 FD      [19]  334 	ld	-3 (ix),h
   019D DD 6E FC      [19]  335 	ld	l,-4 (ix)
   01A0 DD 66 FD      [19]  336 	ld	h,-3 (ix)
   01A3 46            [ 7]  337 	ld	b,(hl)
   01A4 1A            [ 7]  338 	ld	a,(de)
   01A5 D5            [11]  339 	push	de
   01A6 C5            [11]  340 	push	bc
   01A7 33            [ 6]  341 	inc	sp
   01A8 F5            [11]  342 	push	af
   01A9 33            [ 6]  343 	inc	sp
   01AA D5            [11]  344 	push	de
   01AB CDrEBr00      [17]  345 	call	_insertInCollisionArray
   01AE F1            [10]  346 	pop	af
   01AF F1            [10]  347 	pop	af
   01B0 D1            [10]  348 	pop	de
                            349 ;src/utilities/physics.c:98: insertInCollisionArray(col, col->x+col->w, col->y);
   01B1 DD 6E FC      [19]  350 	ld	l,-4 (ix)
   01B4 DD 66 FD      [19]  351 	ld	h,-3 (ix)
   01B7 46            [ 7]  352 	ld	b,(hl)
   01B8 1A            [ 7]  353 	ld	a,(de)
   01B9 4F            [ 4]  354 	ld	c,a
   01BA 21 02 00      [10]  355 	ld	hl,#0x0002
   01BD 19            [11]  356 	add	hl,de
   01BE DD 75 FE      [19]  357 	ld	-2 (ix),l
   01C1 DD 74 FF      [19]  358 	ld	-1 (ix),h
   01C4 DD 6E FE      [19]  359 	ld	l,-2 (ix)
   01C7 DD 66 FF      [19]  360 	ld	h,-1 (ix)
   01CA 66            [ 7]  361 	ld	h,(hl)
   01CB 79            [ 4]  362 	ld	a,c
   01CC 84            [ 4]  363 	add	a, h
   01CD D5            [11]  364 	push	de
   01CE C5            [11]  365 	push	bc
   01CF 33            [ 6]  366 	inc	sp
   01D0 F5            [11]  367 	push	af
   01D1 33            [ 6]  368 	inc	sp
   01D2 D5            [11]  369 	push	de
   01D3 CDrEBr00      [17]  370 	call	_insertInCollisionArray
   01D6 F1            [10]  371 	pop	af
   01D7 F1            [10]  372 	pop	af
   01D8 D1            [10]  373 	pop	de
                            374 ;src/utilities/physics.c:99: insertInCollisionArray(col, col->x, col->y+col->h);
   01D9 DD 6E FC      [19]  375 	ld	l,-4 (ix)
   01DC DD 66 FD      [19]  376 	ld	h,-3 (ix)
   01DF 46            [ 7]  377 	ld	b,(hl)
   01E0 21 03 00      [10]  378 	ld	hl,#0x0003
   01E3 19            [11]  379 	add	hl,de
   01E4 E3            [19]  380 	ex	(sp), hl
   01E5 E1            [10]  381 	pop	hl
   01E6 E5            [11]  382 	push	hl
   01E7 6E            [ 7]  383 	ld	l,(hl)
   01E8 78            [ 4]  384 	ld	a,b
   01E9 85            [ 4]  385 	add	a, l
   01EA 47            [ 4]  386 	ld	b,a
   01EB 1A            [ 7]  387 	ld	a,(de)
   01EC D5            [11]  388 	push	de
   01ED C5            [11]  389 	push	bc
   01EE 33            [ 6]  390 	inc	sp
   01EF F5            [11]  391 	push	af
   01F0 33            [ 6]  392 	inc	sp
   01F1 D5            [11]  393 	push	de
   01F2 CDrEBr00      [17]  394 	call	_insertInCollisionArray
   01F5 F1            [10]  395 	pop	af
   01F6 F1            [10]  396 	pop	af
   01F7 D1            [10]  397 	pop	de
                            398 ;src/utilities/physics.c:100: insertInCollisionArray(col, col->x+col->w, col->y+col->h);	
   01F8 DD 6E FC      [19]  399 	ld	l,-4 (ix)
   01FB DD 66 FD      [19]  400 	ld	h,-3 (ix)
   01FE 46            [ 7]  401 	ld	b,(hl)
   01FF E1            [10]  402 	pop	hl
   0200 E5            [11]  403 	push	hl
   0201 66            [ 7]  404 	ld	h,(hl)
   0202 78            [ 4]  405 	ld	a,b
   0203 84            [ 4]  406 	add	a, h
   0204 47            [ 4]  407 	ld	b,a
   0205 1A            [ 7]  408 	ld	a,(de)
   0206 4F            [ 4]  409 	ld	c,a
   0207 DD 6E FE      [19]  410 	ld	l,-2 (ix)
   020A DD 66 FF      [19]  411 	ld	h,-1 (ix)
   020D 66            [ 7]  412 	ld	h,(hl)
   020E 79            [ 4]  413 	ld	a,c
   020F 84            [ 4]  414 	add	a, h
   0210 C5            [11]  415 	push	bc
   0211 33            [ 6]  416 	inc	sp
   0212 F5            [11]  417 	push	af
   0213 33            [ 6]  418 	inc	sp
   0214 D5            [11]  419 	push	de
   0215 CDrEBr00      [17]  420 	call	_insertInCollisionArray
   0218 DD F9         [10]  421 	ld	sp,ix
   021A DD E1         [14]  422 	pop	ix
   021C C9            [10]  423 	ret
                            424 ;src/utilities/physics.c:103: TCollider* checkWorldCollision(TCollider* entCollider)
                            425 ;	---------------------------------
                            426 ; Function checkWorldCollision
                            427 ; ---------------------------------
   021D                     428 _checkWorldCollision::
                            429 ;src/utilities/physics.c:107: getCollisionedCollider(TLstaticColliders,entCollider,topLeftIndex);
   021D 11r14r00      [10]  430 	ld	de,#_TLstaticColliders
   0220 3Ar29r00      [13]  431 	ld	a,(_topLeftIndex)
   0223 F5            [11]  432 	push	af
   0224 33            [ 6]  433 	inc	sp
   0225 21 03 00      [10]  434 	ld	hl, #3
   0228 39            [11]  435 	add	hl, sp
   0229 4E            [ 7]  436 	ld	c, (hl)
   022A 23            [ 6]  437 	inc	hl
   022B 46            [ 7]  438 	ld	b, (hl)
   022C C5            [11]  439 	push	bc
   022D D5            [11]  440 	push	de
   022E CDr00r00      [17]  441 	call	_getCollisionedCollider
   0231 F1            [10]  442 	pop	af
   0232 F1            [10]  443 	pop	af
   0233 33            [ 6]  444 	inc	sp
                            445 ;src/utilities/physics.c:110: return collision;
   0234 21 00 00      [10]  446 	ld	hl,#0x0000
   0237 C9            [10]  447 	ret
                            448 ;src/utilities/physics.c:113: void resetIndex()
                            449 ;	---------------------------------
                            450 ; Function resetIndex
                            451 ; ---------------------------------
   0238                     452 _resetIndex::
                            453 ;src/utilities/physics.c:115: botLeftIndex = 0;
   0238 21r28r00      [10]  454 	ld	hl,#_botLeftIndex + 0
   023B 36 00         [10]  455 	ld	(hl), #0x00
                            456 ;src/utilities/physics.c:116: topLeftIndex = 0;
   023D 21r29r00      [10]  457 	ld	hl,#_topLeftIndex + 0
   0240 36 00         [10]  458 	ld	(hl), #0x00
                            459 ;src/utilities/physics.c:117: botRighttIndex = 0;
   0242 21r2Ar00      [10]  460 	ld	hl,#_botRighttIndex + 0
   0245 36 00         [10]  461 	ld	(hl), #0x00
                            462 ;src/utilities/physics.c:118: topRightIndex = 0;
   0247 21r2Br00      [10]  463 	ld	hl,#_topRightIndex + 0
   024A 36 00         [10]  464 	ld	(hl), #0x00
   024C C9            [10]  465 	ret
                            466 	.area _CODE
                            467 	.area _INITIALIZER
   0000                     468 __xinit__BLstaticColliders:
   0000 00 00               469 	.dw #0x0000
   0002 00 00               470 	.dw #0x0000
   0004 00 00               471 	.dw #0x0000
   0006 00 00               472 	.dw #0x0000
   0008 00 00               473 	.dw #0x0000
   000A                     474 __xinit__BRstaticColliders:
   000A 00 00               475 	.dw #0x0000
   000C 00 00               476 	.dw #0x0000
   000E 00 00               477 	.dw #0x0000
   0010 00 00               478 	.dw #0x0000
   0012 00 00               479 	.dw #0x0000
   0014                     480 __xinit__TLstaticColliders:
   0014 00 00               481 	.dw #0x0000
   0016 00 00               482 	.dw #0x0000
   0018 00 00               483 	.dw #0x0000
   001A 00 00               484 	.dw #0x0000
   001C 00 00               485 	.dw #0x0000
   001E                     486 __xinit__TRstaticColliders:
   001E 00 00               487 	.dw #0x0000
   0020 00 00               488 	.dw #0x0000
   0022 00 00               489 	.dw #0x0000
   0024 00 00               490 	.dw #0x0000
   0026 00 00               491 	.dw #0x0000
   0028                     492 __xinit__botLeftIndex:
   0028 00                  493 	.db #0x00	; 0
   0029                     494 __xinit__topLeftIndex:
   0029 00                  495 	.db #0x00	; 0
   002A                     496 __xinit__botRighttIndex:
   002A 00                  497 	.db #0x00	; 0
   002B                     498 __xinit__topRightIndex:
   002B 00                  499 	.db #0x00	; 0
                            500 	.area _CABS (ABS)
