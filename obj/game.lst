                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Sep 26 2015) (Linux)
                              4 ; This file was generated Mon Oct  5 20:23:11 2015
                              5 ;--------------------------------------------------------
                              6 	.module game
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _drawAll
                             13 	.globl _cpct_getScreenPtr
                             14 	.globl _cpct_waitVSYNC
                             15 	.globl _cpct_drawSolidBox
                             16 	.globl _cpct_drawSpriteMasked
                             17 	.globl _cpct_px2byteM1
                             18 	.globl _cpct_isKeyPressed
                             19 	.globl _cpct_scanKeyboard_f
                             20 	.globl _pvideomem
                             21 	.globl _y
                             22 	.globl _x
                             23 	.globl _alive
                             24 	.globl _initializeGameScreen
                             25 	.globl _updateUser
                             26 	.globl _game
                             27 ;--------------------------------------------------------
                             28 ; special function registers
                             29 ;--------------------------------------------------------
                             30 ;--------------------------------------------------------
                             31 ; ram data
                             32 ;--------------------------------------------------------
                             33 	.area _DATA
   0000                      34 _alive::
   0000                      35 	.ds 1
   0001                      36 _x::
   0001                      37 	.ds 1
   0002                      38 _y::
   0002                      39 	.ds 1
   0003                      40 _pvideomem::
   0003                      41 	.ds 2
                             42 ;--------------------------------------------------------
                             43 ; ram data
                             44 ;--------------------------------------------------------
                             45 	.area _INITIALIZED
                             46 ;--------------------------------------------------------
                             47 ; absolute external ram data
                             48 ;--------------------------------------------------------
                             49 	.area _DABS (ABS)
                             50 ;--------------------------------------------------------
                             51 ; global & static initialisations
                             52 ;--------------------------------------------------------
                             53 	.area _HOME
                             54 	.area _GSINIT
                             55 	.area _GSFINAL
                             56 	.area _GSINIT
                             57 ;--------------------------------------------------------
                             58 ; Home
                             59 ;--------------------------------------------------------
                             60 	.area _HOME
                             61 	.area _HOME
                             62 ;--------------------------------------------------------
                             63 ; code
                             64 ;--------------------------------------------------------
                             65 	.area _CODE
                             66 ;src/game.c:23: void initializeGameScreen() {
                             67 ;	---------------------------------
                             68 ; Function initializeGameScreen
                             69 ; ---------------------------------
   0000                      70 _initializeGameScreen::
                             71 ;src/game.c:25: cpct_drawSolidBox(INIT_VMEM, cpct_px2byteM1(1, 1, 1, 1), 64, 200);
   0000 21 01 01      [10]   72 	ld	hl,#0x0101
   0003 E5            [11]   73 	push	hl
   0004 2E 01         [ 7]   74 	ld	l, #0x01
   0006 E5            [11]   75 	push	hl
   0007 CDr00r00      [17]   76 	call	_cpct_px2byteM1
   000A F1            [10]   77 	pop	af
   000B F1            [10]   78 	pop	af
   000C 55            [ 4]   79 	ld	d,l
   000D 21 40 C8      [10]   80 	ld	hl,#0xC840
   0010 E5            [11]   81 	push	hl
   0011 D5            [11]   82 	push	de
   0012 33            [ 6]   83 	inc	sp
   0013 21 00 C0      [10]   84 	ld	hl,#0xC000
   0016 E5            [11]   85 	push	hl
   0017 CDr00r00      [17]   86 	call	_cpct_drawSolidBox
   001A F1            [10]   87 	pop	af
   001B F1            [10]   88 	pop	af
   001C 33            [ 6]   89 	inc	sp
                             90 ;src/game.c:26: cpct_drawSolidBox(INIT_VMEM + 64, cpct_px2byteM1(1, 1, 1, 1), 16, 200);
   001D 21 01 01      [10]   91 	ld	hl,#0x0101
   0020 E5            [11]   92 	push	hl
   0021 2E 01         [ 7]   93 	ld	l, #0x01
   0023 E5            [11]   94 	push	hl
   0024 CDr00r00      [17]   95 	call	_cpct_px2byteM1
   0027 F1            [10]   96 	pop	af
   0028 F1            [10]   97 	pop	af
   0029 55            [ 4]   98 	ld	d,l
   002A 21 10 C8      [10]   99 	ld	hl,#0xC810
   002D E5            [11]  100 	push	hl
   002E D5            [11]  101 	push	de
   002F 33            [ 6]  102 	inc	sp
   0030 21 40 C0      [10]  103 	ld	hl,#0xC040
   0033 E5            [11]  104 	push	hl
   0034 CDr00r00      [17]  105 	call	_cpct_drawSolidBox
   0037 F1            [10]  106 	pop	af
   0038 F1            [10]  107 	pop	af
   0039 33            [ 6]  108 	inc	sp
   003A C9            [10]  109 	ret
                            110 ;src/game.c:29: void updateUser() {
                            111 ;	---------------------------------
                            112 ; Function updateUser
                            113 ; ---------------------------------
   003B                     114 _updateUser::
                            115 ;src/game.c:32: cpct_scanKeyboard_f();
   003B CDr00r00      [17]  116 	call	_cpct_scanKeyboard_f
                            117 ;src/game.c:33: if      (cpct_isKeyPressed(Key_CursorRight) && x <  80 - SPR_W) { x++; pvideomem++; }
   003E 21 00 02      [10]  118 	ld	hl,#0x0200
   0041 CDr00r00      [17]  119 	call	_cpct_isKeyPressed
   0044 7D            [ 4]  120 	ld	a,l
   0045 B7            [ 4]  121 	or	a, a
   0046 28 17         [12]  122 	jr	Z,00105$
   0048 3Ar01r00      [13]  123 	ld	a,(#_x + 0)
   004B D6 4C         [ 7]  124 	sub	a, #0x4C
   004D 30 10         [12]  125 	jr	NC,00105$
   004F 21r01r00      [10]  126 	ld	hl, #_x+0
   0052 34            [11]  127 	inc	(hl)
   0053 21r03r00      [10]  128 	ld	hl, #_pvideomem+0
   0056 34            [11]  129 	inc	(hl)
   0057 20 21         [12]  130 	jr	NZ,00106$
   0059 21r04r00      [10]  131 	ld	hl, #_pvideomem+1
   005C 34            [11]  132 	inc	(hl)
   005D 18 1B         [12]  133 	jr	00106$
   005F                     134 00105$:
                            135 ;src/game.c:34: else if (cpct_isKeyPressed(Key_CursorLeft)  && x >   0        ) { x--; pvideomem--; }
   005F 21 01 01      [10]  136 	ld	hl,#0x0101
   0062 CDr00r00      [17]  137 	call	_cpct_isKeyPressed
   0065 7D            [ 4]  138 	ld	a,l
   0066 B7            [ 4]  139 	or	a, a
   0067 28 11         [12]  140 	jr	Z,00106$
   0069 3Ar01r00      [13]  141 	ld	a,(#_x + 0)
   006C B7            [ 4]  142 	or	a, a
   006D 28 0B         [12]  143 	jr	Z,00106$
   006F 21r01r00      [10]  144 	ld	hl, #_x+0
   0072 35            [11]  145 	dec	(hl)
   0073 2Ar03r00      [16]  146 	ld	hl,(_pvideomem)
   0076 2B            [ 6]  147 	dec	hl
   0077 22r03r00      [16]  148 	ld	(_pvideomem),hl
   007A                     149 00106$:
                            150 ;src/game.c:35: if      (cpct_isKeyPressed(Key_CursorUp)    && y >   0        ) { 
   007A 21 00 01      [10]  151 	ld	hl,#0x0100
   007D CDr00r00      [17]  152 	call	_cpct_isKeyPressed
   0080 7D            [ 4]  153 	ld	a,l
   0081 B7            [ 4]  154 	or	a, a
   0082 28 22         [12]  155 	jr	Z,00112$
   0084 3Ar02r00      [13]  156 	ld	a,(#_y + 0)
   0087 B7            [ 4]  157 	or	a, a
   0088 28 1C         [12]  158 	jr	Z,00112$
                            159 ;src/game.c:36: y = y-3;
   008A 21r02r00      [10]  160 	ld	hl,#_y
   008D 7E            [ 7]  161 	ld	a,(hl)
   008E C6 FD         [ 7]  162 	add	a,#0xFD
   0090 77            [ 7]  163 	ld	(hl),a
                            164 ;src/game.c:37: pvideomem = cpct_getScreenPtr(INIT_VMEM, x, y); 
   0091 3Ar02r00      [13]  165 	ld	a,(_y)
   0094 F5            [11]  166 	push	af
   0095 33            [ 6]  167 	inc	sp
   0096 3Ar01r00      [13]  168 	ld	a,(_x)
   0099 F5            [11]  169 	push	af
   009A 33            [ 6]  170 	inc	sp
   009B 21 00 C0      [10]  171 	ld	hl,#0xC000
   009E E5            [11]  172 	push	hl
   009F CDr00r00      [17]  173 	call	_cpct_getScreenPtr
   00A2 22r03r00      [16]  174 	ld	(_pvideomem),hl
   00A5 C9            [10]  175 	ret
   00A6                     176 00112$:
                            177 ;src/game.c:39: else if (cpct_isKeyPressed(Key_CursorDown)  && y < 197 - SPR_H) { 
   00A6 21 00 04      [10]  178 	ld	hl,#0x0400
   00A9 CDr00r00      [17]  179 	call	_cpct_isKeyPressed
   00AC 7D            [ 4]  180 	ld	a,l
   00AD B7            [ 4]  181 	or	a, a
   00AE C8            [11]  182 	ret	Z
   00AF 3Ar02r00      [13]  183 	ld	a,(#_y + 0)
   00B2 D6 B5         [ 7]  184 	sub	a, #0xB5
   00B4 D0            [11]  185 	ret	NC
                            186 ;src/game.c:40: y = y+3;
   00B5 21r02r00      [10]  187 	ld	hl, #_y+0
   00B8 34            [11]  188 	inc	(hl)
   00B9 21r02r00      [10]  189 	ld	hl, #_y+0
   00BC 34            [11]  190 	inc	(hl)
   00BD 21r02r00      [10]  191 	ld	hl, #_y+0
   00C0 34            [11]  192 	inc	(hl)
                            193 ;src/game.c:41: pvideomem = cpct_getScreenPtr(INIT_VMEM, x, y); 
   00C1 3Ar02r00      [13]  194 	ld	a,(_y)
   00C4 F5            [11]  195 	push	af
   00C5 33            [ 6]  196 	inc	sp
   00C6 3Ar01r00      [13]  197 	ld	a,(_x)
   00C9 F5            [11]  198 	push	af
   00CA 33            [ 6]  199 	inc	sp
   00CB 21 00 C0      [10]  200 	ld	hl,#0xC000
   00CE E5            [11]  201 	push	hl
   00CF CDr00r00      [17]  202 	call	_cpct_getScreenPtr
   00D2 22r03r00      [16]  203 	ld	(_pvideomem),hl
   00D5 C9            [10]  204 	ret
                            205 ;src/game.c:44: void drawAll(){
                            206 ;	---------------------------------
                            207 ; Function drawAll
                            208 ; ---------------------------------
   00D6                     209 _drawAll::
                            210 ;src/game.c:46: cpct_drawSpriteMasked(g_character, pvideomem, SPR_W, SPR_H);
   00D6 ED 4Br03r00   [20]  211 	ld	bc,(_pvideomem)
   00DA 11r00r00      [10]  212 	ld	de,#_g_character
   00DD 21 04 10      [10]  213 	ld	hl,#0x1004
   00E0 E5            [11]  214 	push	hl
   00E1 C5            [11]  215 	push	bc
   00E2 D5            [11]  216 	push	de
   00E3 CDr00r00      [17]  217 	call	_cpct_drawSpriteMasked
   00E6 C9            [10]  218 	ret
                            219 ;src/game.c:49: void game() {
                            220 ;	---------------------------------
                            221 ; Function game
                            222 ; ---------------------------------
   00E7                     223 _game::
                            224 ;src/game.c:51: alive = 1;
   00E7 21r00r00      [10]  225 	ld	hl,#_alive + 0
   00EA 36 01         [10]  226 	ld	(hl), #0x01
                            227 ;src/game.c:52: x=0, y=0;
   00EC 21r01r00      [10]  228 	ld	hl,#_x + 0
   00EF 36 00         [10]  229 	ld	(hl), #0x00
   00F1 21r02r00      [10]  230 	ld	hl,#_y + 0
   00F4 36 00         [10]  231 	ld	(hl), #0x00
                            232 ;src/game.c:53: pvideomem = INIT_VMEM; 
   00F6 21 00 C0      [10]  233 	ld	hl,#0xC000
   00F9 22r03r00      [16]  234 	ld	(_pvideomem),hl
                            235 ;src/game.c:55: initializeGameScreen();   // Set up Game Screen
   00FC CDr00r00      [17]  236 	call	_initializeGameScreen
                            237 ;src/game.c:60: while(alive) {
   00FF                     238 00101$:
   00FF 3Ar00r00      [13]  239 	ld	a,(#_alive + 0)
   0102 B7            [ 4]  240 	or	a, a
   0103 C8            [11]  241 	ret	Z
                            242 ;src/game.c:61: cpct_waitVSYNC();            
   0104 CDr00r00      [17]  243 	call	_cpct_waitVSYNC
                            244 ;src/game.c:63: cpct_drawSolidBox(pvideomem, cpct_px2byteM1(1, 1, 1, 1), SPR_W, SPR_H);
   0107 21 01 01      [10]  245 	ld	hl,#0x0101
   010A E5            [11]  246 	push	hl
   010B 2E 01         [ 7]  247 	ld	l, #0x01
   010D E5            [11]  248 	push	hl
   010E CDr00r00      [17]  249 	call	_cpct_px2byteM1
   0111 F1            [10]  250 	pop	af
   0112 F1            [10]  251 	pop	af
   0113 45            [ 4]  252 	ld	b,l
   0114 ED 5Br03r00   [20]  253 	ld	de,(_pvideomem)
   0118 21 04 10      [10]  254 	ld	hl,#0x1004
   011B E5            [11]  255 	push	hl
   011C C5            [11]  256 	push	bc
   011D 33            [ 6]  257 	inc	sp
   011E D5            [11]  258 	push	de
   011F CDr00r00      [17]  259 	call	_cpct_drawSolidBox
   0122 F1            [10]  260 	pop	af
   0123 F1            [10]  261 	pop	af
   0124 33            [ 6]  262 	inc	sp
                            263 ;src/game.c:64: updateUser();                
   0125 CDr3Br00      [17]  264 	call	_updateUser
                            265 ;src/game.c:65: drawAll();                   
   0128 CDrD6r00      [17]  266 	call	_drawAll
   012B 18 D2         [12]  267 	jr	00101$
                            268 	.area _CODE
                            269 	.area _INITIALIZER
                            270 	.area _CABS (ABS)
