                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.4 #9329 (Linux)
                              4 ; This file was generated Mon Oct 12 17:40:39 2015
                              5 ;--------------------------------------------------------
                              6 	.module game
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _drawAll
                             13 	.globl _getPlayer
                             14 	.globl _cpct_getScreenPtr
                             15 	.globl _cpct_waitVSYNC
                             16 	.globl _cpct_drawSolidBox
                             17 	.globl _cpct_drawSpriteMasked
                             18 	.globl _cpct_px2byteM1
                             19 	.globl _cpct_isKeyPressed
                             20 	.globl _cpct_scanKeyboard_f
                             21 	.globl _pvideomem
                             22 	.globl _player
                             23 	.globl _initializeGameScreen
                             24 	.globl _updateUser
                             25 	.globl _game
                             26 ;--------------------------------------------------------
                             27 ; special function registers
                             28 ;--------------------------------------------------------
                             29 ;--------------------------------------------------------
                             30 ; ram data
                             31 ;--------------------------------------------------------
                             32 	.area _DATA
   0000                      33 _player::
   0000                      34 	.ds 2
   0002                      35 _pvideomem::
   0002                      36 	.ds 2
                             37 ;--------------------------------------------------------
                             38 ; ram data
                             39 ;--------------------------------------------------------
                             40 	.area _INITIALIZED
                             41 ;--------------------------------------------------------
                             42 ; absolute external ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DABS (ABS)
                             45 ;--------------------------------------------------------
                             46 ; global & static initialisations
                             47 ;--------------------------------------------------------
                             48 	.area _HOME
                             49 	.area _GSINIT
                             50 	.area _GSFINAL
                             51 	.area _GSINIT
                             52 ;--------------------------------------------------------
                             53 ; Home
                             54 ;--------------------------------------------------------
                             55 	.area _HOME
                             56 	.area _HOME
                             57 ;--------------------------------------------------------
                             58 ; code
                             59 ;--------------------------------------------------------
                             60 	.area _CODE
                             61 ;src/game.c:23: void initializeGameScreen() {
                             62 ;	---------------------------------
                             63 ; Function initializeGameScreen
                             64 ; ---------------------------------
   0000                      65 _initializeGameScreen::
                             66 ;src/game.c:25: cpct_drawSolidBox(INIT_VMEM, cpct_px2byteM1(1, 1, 1, 1), 64, 200);
   0000 21 01 01      [10]   67 	ld	hl,#0x0101
   0003 E5            [11]   68 	push	hl
   0004 2E 01         [ 7]   69 	ld	l, #0x01
   0006 E5            [11]   70 	push	hl
   0007 CDr00r00      [17]   71 	call	_cpct_px2byteM1
   000A F1            [10]   72 	pop	af
   000B F1            [10]   73 	pop	af
   000C 55            [ 4]   74 	ld	d,l
   000D 21 40 C8      [10]   75 	ld	hl,#0xC840
   0010 E5            [11]   76 	push	hl
   0011 D5            [11]   77 	push	de
   0012 33            [ 6]   78 	inc	sp
   0013 21 00 C0      [10]   79 	ld	hl,#0xC000
   0016 E5            [11]   80 	push	hl
   0017 CDr00r00      [17]   81 	call	_cpct_drawSolidBox
   001A F1            [10]   82 	pop	af
   001B F1            [10]   83 	pop	af
   001C 33            [ 6]   84 	inc	sp
                             85 ;src/game.c:26: cpct_drawSolidBox(INIT_VMEM + 64, cpct_px2byteM1(1, 1, 1, 1), 16, 200);
   001D 21 01 01      [10]   86 	ld	hl,#0x0101
   0020 E5            [11]   87 	push	hl
   0021 2E 01         [ 7]   88 	ld	l, #0x01
   0023 E5            [11]   89 	push	hl
   0024 CDr00r00      [17]   90 	call	_cpct_px2byteM1
   0027 F1            [10]   91 	pop	af
   0028 F1            [10]   92 	pop	af
   0029 55            [ 4]   93 	ld	d,l
   002A 21 10 C8      [10]   94 	ld	hl,#0xC810
   002D E5            [11]   95 	push	hl
   002E D5            [11]   96 	push	de
   002F 33            [ 6]   97 	inc	sp
   0030 21 40 C0      [10]   98 	ld	hl,#0xC040
   0033 E5            [11]   99 	push	hl
   0034 CDr00r00      [17]  100 	call	_cpct_drawSolidBox
   0037 F1            [10]  101 	pop	af
   0038 F1            [10]  102 	pop	af
   0039 33            [ 6]  103 	inc	sp
   003A C9            [10]  104 	ret
                            105 ;src/game.c:29: void updateUser() {
                            106 ;	---------------------------------
                            107 ; Function updateUser
                            108 ; ---------------------------------
   003B                     109 _updateUser::
   003B DD E5         [15]  110 	push	ix
   003D DD 21 00 00   [14]  111 	ld	ix,#0
   0041 DD 39         [15]  112 	add	ix,sp
   0043 F5            [11]  113 	push	af
   0044 F5            [11]  114 	push	af
                            115 ;src/game.c:32: x = &(player->pe.de.e.c.x);
   0045 ED 5Br00r00   [20]  116 	ld	de,(_player)
   0049 21 04 00      [10]  117 	ld	hl,#0x0004
   004C 19            [11]  118 	add	hl,de
   004D DD 75 FE      [19]  119 	ld	-2 (ix),l
   0050 DD 74 FF      [19]  120 	ld	-1 (ix),h
                            121 ;src/game.c:33: y = &(player->pe.de.e.c.y);
   0053 21 05 00      [10]  122 	ld	hl,#0x0005
   0056 19            [11]  123 	add	hl,de
   0057 E3            [19]  124 	ex	(sp), hl
                            125 ;src/game.c:34: player->pe.de.e.pscreen = player->pe.de.npscreen;
   0058 6B            [ 4]  126 	ld	l, e
   0059 62            [ 4]  127 	ld	h, d
   005A 01 0A 00      [10]  128 	ld	bc, #0x000A
   005D 09            [11]  129 	add	hl, bc
   005E 46            [ 7]  130 	ld	b,(hl)
   005F 23            [ 6]  131 	inc	hl
   0060 4E            [ 7]  132 	ld	c,(hl)
   0061 78            [ 4]  133 	ld	a,b
   0062 12            [ 7]  134 	ld	(de),a
   0063 13            [ 6]  135 	inc	de
   0064 79            [ 4]  136 	ld	a,c
   0065 12            [ 7]  137 	ld	(de),a
                            138 ;src/game.c:36: cpct_scanKeyboard_f();
   0066 CDr00r00      [17]  139 	call	_cpct_scanKeyboard_f
                            140 ;src/game.c:37: if      (cpct_isKeyPressed(Key_CursorRight) && (*x) <  80 - SPR_W) { 
   0069 21 00 02      [10]  141 	ld	hl,#0x0200
   006C CDr00r00      [17]  142 	call	_cpct_isKeyPressed
   006F 7D            [ 4]  143 	ld	a,l
   0070 B7            [ 4]  144 	or	a, a
   0071 28 37         [12]  145 	jr	Z,00105$
   0073 DD 6E FE      [19]  146 	ld	l,-2 (ix)
   0076 DD 66 FF      [19]  147 	ld	h,-1 (ix)
   0079 4E            [ 7]  148 	ld	c,(hl)
   007A 79            [ 4]  149 	ld	a,c
   007B D6 4C         [ 7]  150 	sub	a, #0x4C
   007D 30 2B         [12]  151 	jr	NC,00105$
                            152 ;src/game.c:38: player->pe.de.npscreen = cpct_getScreenPtr(INIT_VMEM,++(*x),*y);
   007F ED 5Br00r00   [20]  153 	ld	de,(_player)
   0083 21 0A 00      [10]  154 	ld	hl,#0x000A
   0086 19            [11]  155 	add	hl,de
   0087 EB            [ 4]  156 	ex	de,hl
   0088 E1            [10]  157 	pop	hl
   0089 E5            [11]  158 	push	hl
   008A 46            [ 7]  159 	ld	b,(hl)
   008B 79            [ 4]  160 	ld	a,c
   008C 3C            [ 4]  161 	inc	a
   008D DD 6E FE      [19]  162 	ld	l,-2 (ix)
   0090 DD 66 FF      [19]  163 	ld	h,-1 (ix)
   0093 77            [ 7]  164 	ld	(hl),a
   0094 D5            [11]  165 	push	de
   0095 C5            [11]  166 	push	bc
   0096 33            [ 6]  167 	inc	sp
   0097 F5            [11]  168 	push	af
   0098 33            [ 6]  169 	inc	sp
   0099 21 00 C0      [10]  170 	ld	hl,#0xC000
   009C E5            [11]  171 	push	hl
   009D CDr00r00      [17]  172 	call	_cpct_getScreenPtr
   00A0 45            [ 4]  173 	ld	b,l
   00A1 4C            [ 4]  174 	ld	c,h
   00A2 D1            [10]  175 	pop	de
   00A3 78            [ 4]  176 	ld	a,b
   00A4 12            [ 7]  177 	ld	(de),a
   00A5 13            [ 6]  178 	inc	de
   00A6 79            [ 4]  179 	ld	a,c
   00A7 12            [ 7]  180 	ld	(de),a
   00A8 18 3E         [12]  181 	jr	00106$
   00AA                     182 00105$:
                            183 ;src/game.c:40: else if (cpct_isKeyPressed(Key_CursorLeft)  && (*x) >   0        ) {
   00AA 21 01 01      [10]  184 	ld	hl,#0x0101
   00AD CDr00r00      [17]  185 	call	_cpct_isKeyPressed
   00B0 7D            [ 4]  186 	ld	a,l
   00B1 B7            [ 4]  187 	or	a, a
   00B2 28 34         [12]  188 	jr	Z,00106$
   00B4 DD 6E FE      [19]  189 	ld	l,-2 (ix)
   00B7 DD 66 FF      [19]  190 	ld	h,-1 (ix)
   00BA 46            [ 7]  191 	ld	b,(hl)
   00BB 78            [ 4]  192 	ld	a,b
   00BC B7            [ 4]  193 	or	a, a
   00BD 28 29         [12]  194 	jr	Z,00106$
                            195 ;src/game.c:41: player->pe.de.npscreen = cpct_getScreenPtr(INIT_VMEM,--(*x),*y);
   00BF ED 5Br00r00   [20]  196 	ld	de,(_player)
   00C3 21 0A 00      [10]  197 	ld	hl,#0x000A
   00C6 19            [11]  198 	add	hl,de
   00C7 EB            [ 4]  199 	ex	de,hl
   00C8 E1            [10]  200 	pop	hl
   00C9 E5            [11]  201 	push	hl
   00CA 4E            [ 7]  202 	ld	c,(hl)
   00CB 05            [ 4]  203 	dec	b
   00CC DD 6E FE      [19]  204 	ld	l,-2 (ix)
   00CF DD 66 FF      [19]  205 	ld	h,-1 (ix)
   00D2 70            [ 7]  206 	ld	(hl),b
   00D3 D5            [11]  207 	push	de
   00D4 79            [ 4]  208 	ld	a,c
   00D5 F5            [11]  209 	push	af
   00D6 33            [ 6]  210 	inc	sp
   00D7 C5            [11]  211 	push	bc
   00D8 33            [ 6]  212 	inc	sp
   00D9 21 00 C0      [10]  213 	ld	hl,#0xC000
   00DC E5            [11]  214 	push	hl
   00DD CDr00r00      [17]  215 	call	_cpct_getScreenPtr
   00E0 45            [ 4]  216 	ld	b,l
   00E1 4C            [ 4]  217 	ld	c,h
   00E2 D1            [10]  218 	pop	de
   00E3 78            [ 4]  219 	ld	a,b
   00E4 12            [ 7]  220 	ld	(de),a
   00E5 13            [ 6]  221 	inc	de
   00E6 79            [ 4]  222 	ld	a,c
   00E7 12            [ 7]  223 	ld	(de),a
   00E8                     224 00106$:
                            225 ;src/game.c:43: if      (cpct_isKeyPressed(Key_CursorUp)    && *y >   0        ) { 
   00E8 21 00 01      [10]  226 	ld	hl,#0x0100
   00EB CDr00r00      [17]  227 	call	_cpct_isKeyPressed
   00EE 7D            [ 4]  228 	ld	a,l
   00EF B7            [ 4]  229 	or	a, a
   00F0 28 32         [12]  230 	jr	Z,00112$
   00F2 E1            [10]  231 	pop	hl
   00F3 E5            [11]  232 	push	hl
   00F4 7E            [ 7]  233 	ld	a,(hl)
   00F5 B7            [ 4]  234 	or	a, a
   00F6 28 2C         [12]  235 	jr	Z,00112$
                            236 ;src/game.c:44: *y = (*y)-3;
   00F8 C6 FD         [ 7]  237 	add	a,#0xFD
   00FA 47            [ 4]  238 	ld	b,a
   00FB E1            [10]  239 	pop	hl
   00FC E5            [11]  240 	push	hl
   00FD 70            [ 7]  241 	ld	(hl),b
                            242 ;src/game.c:45: player->pe.de.npscreen = cpct_getScreenPtr(INIT_VMEM, *x, *y); 
   00FE ED 5Br00r00   [20]  243 	ld	de,(_player)
   0102 21 0A 00      [10]  244 	ld	hl,#0x000A
   0105 19            [11]  245 	add	hl,de
   0106 EB            [ 4]  246 	ex	de,hl
   0107 DD 6E FE      [19]  247 	ld	l,-2 (ix)
   010A DD 66 FF      [19]  248 	ld	h,-1 (ix)
   010D 7E            [ 7]  249 	ld	a,(hl)
   010E D5            [11]  250 	push	de
   010F C5            [11]  251 	push	bc
   0110 33            [ 6]  252 	inc	sp
   0111 F5            [11]  253 	push	af
   0112 33            [ 6]  254 	inc	sp
   0113 21 00 C0      [10]  255 	ld	hl,#0xC000
   0116 E5            [11]  256 	push	hl
   0117 CDr00r00      [17]  257 	call	_cpct_getScreenPtr
   011A 45            [ 4]  258 	ld	b,l
   011B 4C            [ 4]  259 	ld	c,h
   011C D1            [10]  260 	pop	de
   011D 78            [ 4]  261 	ld	a,b
   011E 12            [ 7]  262 	ld	(de),a
   011F 13            [ 6]  263 	inc	de
   0120 79            [ 4]  264 	ld	a,c
   0121 12            [ 7]  265 	ld	(de),a
   0122 18 3C         [12]  266 	jr	00115$
   0124                     267 00112$:
                            268 ;src/game.c:47: else if (cpct_isKeyPressed(Key_CursorDown)  && *y < 197 - SPR_H) { 
   0124 21 00 04      [10]  269 	ld	hl,#0x0400
   0127 CDr00r00      [17]  270 	call	_cpct_isKeyPressed
   012A 7D            [ 4]  271 	ld	a,l
   012B B7            [ 4]  272 	or	a, a
   012C 28 32         [12]  273 	jr	Z,00115$
   012E E1            [10]  274 	pop	hl
   012F E5            [11]  275 	push	hl
   0130 46            [ 7]  276 	ld	b,(hl)
   0131 78            [ 4]  277 	ld	a,b
   0132 D6 B5         [ 7]  278 	sub	a, #0xB5
   0134 30 2A         [12]  279 	jr	NC,00115$
                            280 ;src/game.c:48: *y = (*y)+3;
   0136 04            [ 4]  281 	inc	b
   0137 04            [ 4]  282 	inc	b
   0138 04            [ 4]  283 	inc	b
   0139 E1            [10]  284 	pop	hl
   013A E5            [11]  285 	push	hl
   013B 70            [ 7]  286 	ld	(hl),b
                            287 ;src/game.c:49: player->pe.de.npscreen = cpct_getScreenPtr(INIT_VMEM, *x, *y); 
   013C ED 5Br00r00   [20]  288 	ld	de,(_player)
   0140 21 0A 00      [10]  289 	ld	hl,#0x000A
   0143 19            [11]  290 	add	hl,de
   0144 EB            [ 4]  291 	ex	de,hl
   0145 DD 6E FE      [19]  292 	ld	l,-2 (ix)
   0148 DD 66 FF      [19]  293 	ld	h,-1 (ix)
   014B 7E            [ 7]  294 	ld	a,(hl)
   014C D5            [11]  295 	push	de
   014D C5            [11]  296 	push	bc
   014E 33            [ 6]  297 	inc	sp
   014F F5            [11]  298 	push	af
   0150 33            [ 6]  299 	inc	sp
   0151 21 00 C0      [10]  300 	ld	hl,#0xC000
   0154 E5            [11]  301 	push	hl
   0155 CDr00r00      [17]  302 	call	_cpct_getScreenPtr
   0158 45            [ 4]  303 	ld	b,l
   0159 4C            [ 4]  304 	ld	c,h
   015A D1            [10]  305 	pop	de
   015B 78            [ 4]  306 	ld	a,b
   015C 12            [ 7]  307 	ld	(de),a
   015D 13            [ 6]  308 	inc	de
   015E 79            [ 4]  309 	ld	a,c
   015F 12            [ 7]  310 	ld	(de),a
   0160                     311 00115$:
   0160 DD F9         [10]  312 	ld	sp, ix
   0162 DD E1         [14]  313 	pop	ix
   0164 C9            [10]  314 	ret
                            315 ;src/game.c:53: void drawAll(){
                            316 ;	---------------------------------
                            317 ; Function drawAll
                            318 ; ---------------------------------
   0165                     319 _drawAll::
                            320 ;src/game.c:54: cpct_drawSolidBox(player->pe.de.e.pscreen, cpct_px2byteM1(1, 1, 1, 1), SPR_W, SPR_H);
   0165 21 01 01      [10]  321 	ld	hl,#0x0101
   0168 E5            [11]  322 	push	hl
   0169 2E 01         [ 7]  323 	ld	l, #0x01
   016B E5            [11]  324 	push	hl
   016C CDr00r00      [17]  325 	call	_cpct_px2byteM1
   016F F1            [10]  326 	pop	af
   0170 F1            [10]  327 	pop	af
   0171 45            [ 4]  328 	ld	b,l
   0172 2Ar00r00      [16]  329 	ld	hl,(_player)
   0175 5E            [ 7]  330 	ld	e,(hl)
   0176 23            [ 6]  331 	inc	hl
   0177 56            [ 7]  332 	ld	d,(hl)
   0178 21 04 10      [10]  333 	ld	hl,#0x1004
   017B E5            [11]  334 	push	hl
   017C C5            [11]  335 	push	bc
   017D 33            [ 6]  336 	inc	sp
   017E D5            [11]  337 	push	de
   017F CDr00r00      [17]  338 	call	_cpct_drawSolidBox
   0182 F1            [10]  339 	pop	af
   0183 F1            [10]  340 	pop	af
   0184 33            [ 6]  341 	inc	sp
   0185 FD 2Ar00r00   [20]  342 	ld	iy,(_player)
                            343 ;src/game.c:55: cpct_drawSpriteMasked(player->pe.de.e.sprite, player->pe.de.npscreen, SPR_W, SPR_H);
   0189 FD E5         [15]  344 	push	iy
   018B E1            [10]  345 	pop	hl
   018C 11 0A 00      [10]  346 	ld	de, #0x000A
   018F 19            [11]  347 	add	hl, de
   0190 4E            [ 7]  348 	ld	c,(hl)
   0191 23            [ 6]  349 	inc	hl
   0192 46            [ 7]  350 	ld	b,(hl)
   0193 FD 5E 02      [19]  351 	ld	e,2 (iy)
   0196 FD 56 03      [19]  352 	ld	d,3 (iy)
   0199 21 04 10      [10]  353 	ld	hl,#0x1004
   019C E5            [11]  354 	push	hl
   019D C5            [11]  355 	push	bc
   019E D5            [11]  356 	push	de
   019F CDr00r00      [17]  357 	call	_cpct_drawSpriteMasked
   01A2 C9            [10]  358 	ret
                            359 ;src/game.c:58: void game() {
                            360 ;	---------------------------------
                            361 ; Function game
                            362 ; ---------------------------------
   01A3                     363 _game::
                            364 ;src/game.c:60: player = getPlayer();
   01A3 CDr00r00      [17]  365 	call	_getPlayer
   01A6 22r00r00      [16]  366 	ld	(_player),hl
                            367 ;src/game.c:61: player->pe.de.e.c.e = &player->pe.de.e;
   01A9 ED 5Br00r00   [20]  368 	ld	de,(_player)
   01AD 21 08 00      [10]  369 	ld	hl,#0x0008
   01B0 19            [11]  370 	add	hl,de
   01B1 73            [ 7]  371 	ld	(hl),e
   01B2 23            [ 6]  372 	inc	hl
   01B3 72            [ 7]  373 	ld	(hl),d
                            374 ;src/game.c:67: pvideomem = INIT_VMEM; 
   01B4 21 00 C0      [10]  375 	ld	hl,#0xC000
   01B7 22r02r00      [16]  376 	ld	(_pvideomem),hl
                            377 ;src/game.c:69: initializeGameScreen();   // Set up Game Screen
   01BA CDr00r00      [17]  378 	call	_initializeGameScreen
                            379 ;src/game.c:74: while(player->lifes > 0) {      
   01BD                     380 00101$:
   01BD FD 2Ar00r00   [20]  381 	ld	iy,(_player)
   01C1 FD 7E 12      [19]  382 	ld	a,18 (iy)
   01C4 B7            [ 4]  383 	or	a, a
   01C5 C8            [11]  384 	ret	Z
                            385 ;src/game.c:75: cpct_waitVSYNC();            
   01C6 CDr00r00      [17]  386 	call	_cpct_waitVSYNC
                            387 ;src/game.c:77: updateUser();                
   01C9 CDr3Br00      [17]  388 	call	_updateUser
                            389 ;src/game.c:78: drawAll();                   
   01CC CDr65r01      [17]  390 	call	_drawAll
   01CF 18 EC         [12]  391 	jr	00101$
                            392 	.area _CODE
                            393 	.area _INITIALIZER
                            394 	.area _CABS (ABS)
